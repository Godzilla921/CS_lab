# 姓名: 金雅各		学号: 1120201316	班级: 07112002
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 		%rax, %rax		# rax 统计正整数的个数
	iaddq		$-5 , %rdx		# limit=len-5
	jg		Loop6_6		 # 若元素个数>=6 则 挑战到6X6循环展开处 
Loop1:
	iaddq		$ 5 , %rdx		# 进行1X1循环前，先加上减去的5
	jg		Loop1_1		#
	ret					# 若=0则直接返回
Loop1_1:	
	mrmovq 	(%rdi), %r10		# 读入
	rrmovq		%rax, %r11		# r11寄存器存放条件传送的值
	iaddq		$1, %r11
	andq 		%r10, %r10
	cmovg		%r11, %rax		# 使用条件传送
	rmmovq 	%r10, (%rsi)		# 最后再写入内存，避免数据相关
	
	iaddq 		$8, %rdi		# 更新rdi  src++
	iaddq		$8, %rsi		# 更新rsi  dst++
	iaddq		$-1, %rdx		# 更新rdx 
	jg		Loop1_1
	ret

Loop6_6:	#6X6 循环展开
	#------------------
	mrmovq 	(%rdi), %r8		# 读入第一个元素 src[i]
	mrmovq 	8(%rdi), %r9		# 读入第二个元素 src[i+1]
	mrmovq 	16(%rdi), %r10		# 读入第三个元素 src[i+2]
	mrmovq 	24(%rdi), %r11		# 读入第四个元素 src[i+3]
	mrmovq 	32(%rdi), %r12		# 读入第五个元素 src[i+4]
	mrmovq 	40(%rdi), %r13		# 读入第六个元素 src[i+5]
	#------------------ 对于每个寄存器的读入与写回至少间隔三条指令，避免了数据相关
	rmmovq 	%r8, (%rsi)		# 写回到dst[i]中
	rmmovq 	%r9, 8(%rsi)		# 写回到dst[i+1]中
	rmmovq 	%r10, 16(%rsi)		# 写回到dst[i+2]中
	rmmovq 	%r11, 24(%rsi)		# 写回到dst[i+3]中
	rmmovq 	%r12, 32(%rsi)		# 写回到dst[i+4]中
	rmmovq 	%r13, 40(%rsi)		# 写回到dst[i+5]中
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r8, %r8		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r9, %r9		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r10, %r10		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r11, %r11		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r12, %r12		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	rrmovq		%rax, %r14		#
	iaddq		$1, %r14		# r14 寄存器存储 rax +1 后的值，用于条件传送
	andq 		%r13, %r13		# 
	cmovg		%r14, %rax		# 采用条件传送指令代替条件转移指令，优化性能
	
	iaddq  	$48, %rdi		# 更新 src 与 dest
	iaddq		$48, %rsi		# src 与 dest 都+6 
	iaddq		$-6, %rdx		# 
	jg 		Loop6_6		# 大于0就继续循环
	iaddq		$ 5, %rdx
	jg		Loop1_1		# 
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
